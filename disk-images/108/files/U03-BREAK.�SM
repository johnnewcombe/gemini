;     COPYRIGHT (c) 1981 ELECTRONIC ACCOUNTING SERVICES.
;PROGRAM TO READ A FILE STRIP OFF ALL CPM END OF FILE (^Z) CHARACTERS
;AND REP WITH ?,WRITING THE RESULT TO A SECOND FILE.
;THE TWO FILE NAMES TO BE SPACIFIED IN THE COMMAND LINE IN THE FORM :
;BREAK ONE.BAS TWO.BAS
;WHERE ONE.BAS IS THE NAME OF THE ORIGINAL FILE AND TWO.BAS IS THE
;NAME OF THE RECEIVING FILE.
;DATA IS SENT SECTOR BY SECTOR INTO A 4K BUFFER WHICH IS PROCESSED
;AND THEN SENT TO THE RECEIVING FILE.
BDOS	EQU	0005H		;BDOS ENTRY POINT
TPA	EQU	0100H		;BASE OF TPA
DMA	EQU	1100H		;ADDRESS FOR DIRECT MEMORY ACCESS
STACK	EQU	1050H		;USER STACK AREA
FCB1	EQU	005CH		;ADDRESS OF FILE CONTROL BLOCK 1
OFCB2	EQU	006CH		;OLD ADDRESS OF FILE CONTROL BLOCK 2
FCB2	EQU	1000H		;NEW ADDRESS OF FILE CONTROL  BLOCK 2
FCB2CR	EQU	FCB2 + 32	;ADDRESS OF CURRENT REC IN FCB2
SECTOR	EQU	128		;NUMBER OF BYTES IN SECTOR
NSECT	EQU	32		;NUMBER OF SECTORS IN BUFFER
SDMA	EQU	1AH		;BDOS FUNCTION 26
OPEN	EQU	0FH		;BDOS FUNCTION 15
MAKE	EQU	16H		;BDOS FUNCTION 22
READ	EQU	14H		;BDOS FUNCTION 20
WRITE	EQU	15H		;BDOS FUNCTION 21
CLOSE	EQU	10H		;BDOS FUNCTION 16
EOF	EQU	1AH		;CPM END OF FILE (^Z)
REP	EQU	1FH		;ASCII ?
	ORG	TPA
	LXI	SP,STACK	;SET LOCAL STACK AREA
	LXI	H,OFCB2		;HL-ADDRESS OF OLD FCB2
	LXI	D,FCB2		;DE-ADDRESS OF NEW FCB2
	MVI	B,16		;SET COUNT TO 16
MOVE	MOV	A,M		;FETCH CONTENTS TO BE MOVED
	STAX	D		;STORE AT NEW LOCATION
	INX	H
	INX	D
	DCR	B
	JNZ	MOVE		;LOOP IF COUNT NOT ZERO
	MVI	A,00H
	STA	FCB2CR		;SET CURRENT RECORD TO ZERO
OPEN1	LXI	D,FCB1
	MVI	C,OPEN
	CALL	BDOS		;FUNCTION 15
	CPI	0FFH
	JZ	ABORT		;IF NO MATCH ABORT
MAKE2	LXI	D,FCB2
	MVI	C,MAKE
	CALL	BDOS		;FUNCTION 22
	CPI	0FFH
	JZ	ABORT		;IF NO DIRECTORY SPACE  ABORT
	MVI	B,00H		;LOAD COUNT WITH ZERO
SDMA1	LXI	D,DMA
	PUSH	D		;SAVE DMA ADDRESS ON STACK
	MVI	C,SDMA
	CALL	BDOS		;FUNCTION 26
READ1	INR	B
	PUSH	B		;SAVE SECTOR COUNT ON STACK
	LXI	D,FCB1
	MVI	C,READ
	CALL	BDOS		;FUNCTION 20
	CPI	00H
	JNZ	FLAG		;IF REAL END OF FILE JUMP OUT OF LOOP
SDMA2	POP	B
	POP	H		;GET PRESENT ADDRESS FOR DMA
	MVI	E,SECTOR	;LOAD SECTOR SIZE INTO LO BYTE OF DE
	MVI	D,00H		;LOAD ZERO INTO HI BYTE OF DE
	DAD	D		;ADD SECTOR OFFSET TO CURRENT DMA
	PUSH	H		;SAVE NEW DMA ADDRESS ON STACK
	PUSH	B
	XCHG			;SWAP REGISTERS HL AND DE
	MVI	C,SDMA
	CALL	BDOS		;FUNCTION 26
	POP	B		;GET PRESENT VALUE OF COUNT FROM STACK
	MOV	A,B
	CPI	NSECT
	JNZ	READ1		;IF = NUMBER OF SECTORS LOOP
	JMP	COMPAR
FLAG	POP	B		;GET COUNT FROM STACK
	DCR	B		;DECREMENT COUNT AS REAL EOF
COMPAR	PUSH	B		;SAVE COUNT ON STACK
	LXI	H,DMA		;HL-START OF DATA BLOCK
LOOP2	MVI	D,SECTOR	;COUNT FOR INNER LOOP
LOOP1	MOV	A,M		;GET BYTE
	ANI	7FH		;SET BIT 7 TO 0
	CPI	EOF
	JNZ	COUNT		;IF NOT CPM EOF JUMP
	MVI	M,REP		;SWAP WITH ?
COUNT	INX	H
	DCR	D
	JNZ	LOOP1		;INNER LOOP
	DCR	B
	JNZ	LOOP2		;OUTER LOOP
SDMA3	LXI	D,DMA
	POP	B
	PUSH	B		;SAVE COUNT ON STACK AS CONTINUE FLAG
	PUSH	D		;SAVE ADDRESS OF DMA ON STACK
	PUSH	B
	MVI	C,SDMA
	CALL	BDOS		;FUNCTION 26
	POP	B		;LOAD SECTOR COUNT FROM STACK
WRITE1	PUSH	B		;SAVE COUNT FOR LOOP
	LXI	D,FCB2
	MVI	C,WRITE
	CALL	BDOS		;FUNCTION 21
	POP	B
	POP	H		;GET DMA ADDRESS FROM STACK
SDMA4	MVI	E,SECTOR	;LOAD SECTOR OFFSET INTO LO BYTE OF DE
	MVI	D,00H		;LOAD ZERO INTO HI BYTE OF DE
	DAD	D		;ADD SECTOR OFFSET TO DMA
	PUSH	H		;SAVE NEW DMA ON STACK
	PUSH	B
	XCHG			;SWAP DE AND HL
	MVI	C,SDMA
	CALL	BDOS		;FUNCTION 26
	POP	B		;GET SECTOR COUNT FROM STACK
	DCR	B
	JNZ	WRITE1		;IF MORE SECTORS LOOP
TFLAG	POP	H
	POP	B		;LOAD CONTINUE FLAG
	MOV	A,B
	CPI	NSECT
	JZ	SDMA1		;IF NOT REAL EOF LOOP BACK FOR NEW BLOK
WRITE2	LXI	D,DMA
	MVI	C,SDMA
	CALL	BDOS		;FUNCTION 26
	MVI	B,SECTOR	;SET COUNT
	LXI	H,DMA
	MVI	M,EOF		;SAVE EOF ^Z
	INX	H
	DCR	B
LOOP3	MVI	M,20H		;ASCII SPACE TO FILL REMAINING SECTOR
	INX	H
	DCR	B
	JNZ	LOOP3		;IF SECTOR NOT FULL LOOP
	LXI	D,FCB2
	MVI	C,WRITE
	CALL	BDOS		;FUNCTION 21
CLOSE1	LXI	D,FCB1
	MVI	C,CLOSE
	CALL	BDOS		;FUNCTION 16
CLOSE2	LXI	D,FCB2
	MVI	C,CLOSE
	CALL	BDOS		;FUNCTION 16
ABORT	NOP
	JMP	0000H		;RETURN TO CPM
