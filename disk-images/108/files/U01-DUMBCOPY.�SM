1
;DUMB COPY ROUTINE
;=================
;
;BY DEREK FORDRED, 11 APRIL 1981
;MODIFIED TO MAKE IT INDEPENDENT OF THE
;SD SYSTEMS VERSAFLOPPY AS ORIGINALLY
;WRITTEN. BY ANDREW CLARKE, 11 MAY 1981
;
;THE FREE MEMORY CALCULATING ROUTINE IS 
;TAKEN FROM MFT.ASM (DR.DOBB'S).
;THE OPERATION OF THE PROGRAM IS SIMILAR TO MFT.
;EXCEPT THAT NO FILENAME IS REQUIRED WHEN
;RUNNING THE PROGRAM.
;
;NON-CPM DISKETTES CAN BE COPIED, AS LONG AS
;THEY ARE FORMATTED TO SUIT YOUR CONTROLLER
;
;
BDOS	EQU	5	;BDOS ENTRY POINT
CR	EQU	0DH
LF	EQU	0AH
NSECTOR	EQU	26	;NUMBER OF SECTORS TO TRACK
NBYTES	EQU	128	;NO.OF BYTES PER SECTOR
NTRACKS	EQU	77	;NO. OF TRACKS TO DRIVE
NSECT	EQU	NSECTOR*NTRACKS
			;NO. OF SECTORS PER DISK
CPM	EQU	0000H
;
;
;
	ORG	100H
;
COPY:	LXI	SP,STKPTR
	LXI	H,MSG1	;PRINT 'COPY VER 1.2'
	CALL	WASC
	SUB	A
	STA	UNIT	;ASSUME DRIVE A

;
;CALCULATE BUFFER SIZE = FWA(BDOS)-FWA(MBUF)
;
	LHLD	BDOS+1	;HL=BDOS+1-6
	LXI	D,-6
	DAD	D
	MOV	A,L
	ANI	80H	;HL=HL MOD 128
	MOV	L,A
	LXI	D,MBUF	;HL=HL-FWA(MBUF)
	CALL	SUBTR	;SUBTRACT HL-DE
	DAD	H	;HL=HL/128
	MOV	L,H
	MVI	A,0
	ACI	0
	MOV	H,A
	DCX	H	;HL=HL-1
	SHLD	SPACE	;SAVE BUFFER SIZE
	LXI	H,MSG2	;WRITE 'BUFFER SIZE = '
	CALL	WASC
	LHLD	SPACE	;WRITE SIZE OF BUFFER
	CALL	WDWC
	LXI	H,MSG3	;WRITE ' SECTORS'
	CALL	WASC
INIT:	XRA	A
	STA	ICB
	STA	OCB
	INR	A
	STA	ICB+1
	STA	OCB+1
	LXI	H,0
	SHLD	SECTORS
;
;ASK USER TO MOUNT INPUT DISK
;
COPY1:	LXI	H,MSG4	;WRITE 'MOUNT INPUT DISK, TYPE CR'
	CALL	WASC
	CALL	RACC	;READ RESPONSE
	CPI	CR	;WAIT FOR CR
	JNZ	COPY1
	CALL	WEOLC	;ECHO CR-LF
;
;
READ:	LDA	ICB	;INPUT DISK
	STA	TRK	;TRACK NUMBER
	LDA	ICB+1	;SECTOR NUMBER
	STA	SCTR	;
	LHLD    SPACE   ; NO. OF SECTORS TO TRANSFER
	SHLD	NREC
	LXI	H,MBUF
	SHLD	TADDR
	CALL	LOADER
	LDA	TRK
	STA	ICB
	LDA	SCTR
	STA	ICB+1
;
;
COPY2:	;ASK USER TO MOUNT OUTPUT DISK
	LXI	H,MSG5
	CALL	WASC
	CALL	RACC
	CPI	CR
	JNZ	COPY2
	CALL	WEOLC	;CR,LF
;
;WRITE MEMORY IMAGE TO OUTPUT DISK
;
WRITE:	LDA	OCB	;OUTPUT DISK
	STA	TRK
	LDA	OCB+1
	STA	SCTR
	LHLD	SPACE
	SHLD	NREC
	LXI	H,MBUF
	SHLD	TADDR
	CALL	SAVER
	LDA	SCTR
	CPI	26
	JNZ	WR5
	LDA	TRK
	INR	A
	STA	TRK
	XRA	A
WR5:	INR	A
	STA	SCTR
	STA	ICB+1
	STA	OCB+1
	LDA	TRK
	STA	OCB
	STA	ICB
	CALL	MULT	;CALCULATE SECTOR NUMBER
	CALL	CHECK	;CHECK IF NEAR END OF DISK
	JNZ	COPY1	;MORE TO DO
;
;COPY COMPLETE
;
ENCOP:	LXI	H,MSG6	;END COPY MESSAGE
	CALL	WASC
	JMP	CPM	;RETURN TO CPM
	;
MSG1:	DB	'COPY VER 1.2',CR,LF,0
MSG2:	DB	'BUFFER SIZE = ',0
MSG3:	DB	' SECTORS',CR,LF,0
MSG4:	DB	'MOUNT INPUT DISK,TYPE CR',0
MSG5:	DB	'MOUNT OUTPUT DISK, TYPE CR',0
MSG6:	DB	'END OF TRANSFER',CR,LF,0
MSG7:	DB	'ERROR,OVERRUN THE DISK',CR,LF,0
;
MULT:	LHLD	OCB	;L=TRK, H=SECTOR
	PUSH	H
	MVI	H,0	;HL=TRK
	DAD	H	;HL*2
	PUSH	H	;SAVE IT
	DAD	H	;HL*4
	DAD	H	;HL*8
	PUSH	H	;SAVE IT
	DAD	H	;HL*16
	POP	D
	DAD	D	;HL*24
	POP	D
	DAD	D	;HL*26
	POP	D	;DE CONTAINS SECTOR,TRK
	MOV	E,D	;E IS SECTOR
	MVI	D,00
	DCR	E
	DAD	D	;TOTAL SECTORS IN HL
	RET
;
;
CHECK:	CALL	WDWC	;PRINT NO. OF SECTS. COPIED
	PUSH	H
	LXI	H,MSG3	;PRINT ' SECTORS'
	CALL	WASC
	POP	D
	LXI	H,NSECT	;DE CONTAINS TOTAL SECTORS
			;COPIED SO FAR
			;HL CONTAINS TOTAL SECTORS
			;ON DISKETTE.
	CALL	SUBTR	;HL-DE
	ORA	L	;SET FLAGS
	RZ		;COPY COMPLETE
;
	PUSH	H	;SAVE SECTORS LFT TO COPY
	LHLD	SPACE
	XCHG		;SPACE IN DE
	POP	H	;SECTORS TO COPY
	PUSH	H
	CALL	SUBTR	;HL-DE
	POP	H
	RAL
	JC	NEAR	;NEAR END OF DISK
	MVI	A,0FFH
	ORA	A
	RET		;MORE THAN SIZE TO GO
;
;
NEAR:	SHLD	SPACE	;REDUCED NO. OF SECTORS
	MVI	A,0FFH
	RET
;
;
WASC:	MOV	A,M
	ORA	A
	RZ
	CALL	WACC
	INX	H
	JMP	WASC
;
;
WACC:	PUSH	H
	PUSH	D
	PUSH	B
	PUSH	PSW
	MVI	C,02
	MOV	E,A
	CALL	BDOS
	POP	PSW
	POP	B
	POP	D
	POP	H
	RET
;
SUBTR:	MOV	A,L
	SUB	E
	MOV	L,A
	MOV	A,H
	SBB	D
	MOV	H,A
	RET
;
;
STACK	DS	64
STKPTR	EQU	$
	DS	4
SPACE	DW	0
ICB	DW	0
OCB	DW	0
;
;
WDWC:	;WRITE DECIMAL WORD TO CONSOLE
	PUSH H!PUSH D!PUSH B
	MVI	B,0
	LXI	D,10000
	CALL	WNDD
	LXI	D,1000
	CALL	WNDD
	LXI	D,100
	CALL	WNDD
	LXI	D,10
	CALL	WNDD
	LXI	D,1
	MVI	B,1
	CALL	WNDD
	POP B!POP D!POP H
	RET
;
WNDD:	MVI	C,0
WNDD1:	MOV	A,L
	SUB	E
	MOV	L,A
	MOV	A,H
	SBB	D
	MOV	H,A
	JC	WNDD2
	INR	C
	JMP	WNDD1
;
WNDD2:	DAD	D
	MOV	A,C
	ORA	C
	JNZ	WNDD4
	MOV	A,B
	ORA	B
	JNZ	WNDD4
	MVI	A,' '
	JMP	WACC
;
WNDD4:	MVI	B,1
	MOV	A,C
	ADI	'0'
	JMP	WACC
;
WEOLC:	MVI	A,CR
	CALL	WACC
	MVI	A,LF
	JMP	WACC
;
RACC:	PUSH H!PUSH D!PUSH B
	MVI	C,01
	CALL	BDOS
	POP B!POP D!POP H
	RET

;THE FOLLOWING ARE DISK PARAMETERS
;IN A DATA TABLE
TADDR	EQU	$
UNIT	EQU	$+2
SCTR	EQU	$+3
TRK	EQU	$+4
NREC	EQU	$+5
	DS	7

BIOS:	LHLD	CPM+1	;MAKE BIOS CALL BY 
	DAD	D	;THE OFFSET IN DE
	PCHL

INCDEC:	LHLD	TADDR
	LXI	D,NBYTES
	DAD	D
	SHLD	TADDR	;INCREMENT TRANSFER ADDRESS

	LHLD	NREC
	DCX	H
	MOV	A,H
	ORA	L
	RZ		;RETURN WITH ZERO SET IF DONE
	SHLD	NREC	;OTHERWISE DECREMENT COUNT

	LXI	H,SCTR
	INR	M
	MVI	A,NSECTOR+1
	CMP	M
	RNZ
	MVI	M,1
	INX	H
	INR	M
	MVI	A,NTRACKS+1
	CMP	M
	RNZ		;INCREMENT AND CHECK FOR OVERRUN
	LXI	H,MSG7	;OVERRUN THE DISK!
	CALL	WASC
	JMP	CPM

TELL:	LXI	H,TADDR	;SET THE SECTOR,TRACK, AND DISK
	MOV	C,M
	INX	H
	MOV	B,M
	PUSH	H
	LXI	D,33	;SET THE DMA
	CALL	BIOS
	POP H!INX H!MOV C,M
	LXI	D,24	;SELECT THE DISK
	PUSH H!CALL BIOS
	POP H!INX H!MOV C,M
	LXI	D,30	;SET THE SECTOR
	PUSH H!CALL BIOS
	POP H!INX H!MOV C,M
	LXI	D,27	;SET THE TRACK
	CALL	BIOS
	RET

SAVER:	CALL	TELL
	LXI	D,39
	CALL	BIOS
	RNZ
	CALL	INCDEC
	JNZ	SAVER	
	RET

LOADER:	CALL	TELL
	LXI	D,36
	CALL	BIOS
	RNZ
	CALL	INCDEC	
	JNZ	LOADER
	RET

;	
SECTORS	DW	0000
MBUF	EQU	$
;
	END	100H

; ***E.O.F***