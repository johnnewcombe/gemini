;****************************************;
;     MULTIPLE FILE PRINT UTILITY        ;
;****************************************;

;VERSION 1.1
;ORIGINAL CODED BY JEFF KRAVITZ
;MODIFIED BY A. GOLD AND ANDREW CLARKE
;CONDITIONAL ASSEMBLY FOR <FF> HARDWARE AND
;OUTPUT TO CONSOLE OR CP/M LIST DEVICE
;10/15/77
;MULTIPLE FILE ACCESS ADDED 3/26/81
;THIS VERSION IS MEANT AS A 'STRIPPED'
;PROGRAMME TO HACK AS APPROPRIATE FOR
;YOUR SYSTEM. THERE ARE ROUTINES IN THE
;BIG VERSION IN THE U.S.USERGROUP NO
;15.12 TO DO PAGINATION AND PRINT PITCH
;FOR DIABLO. THIS VERSION IS INTENDED TO
;PRINT OUT BATCHES OF ASSEMBLY LISTINGS
;OR DOCUMENTATION WHILE I GO AWAY TO HAVE
;A NICE CUP OF TEA
;TO USE TYPE-
;PRINT AFN.TYP AFN.TYP ............AFN.TYP
;   IN OTHER WORDS IT WILL ACCEPT A
;COMMAND LINE OF A LIST OF UNAMBIGUOUS
;OR AMBIGUOUS FILENAMES
;   PRINT *.* WOULD PRINT OUT THE WHOLE
;DISK
;
;TO MAKE THIS PROGRAMME, I RIPPED THE
;GUTS OUT OF THE PROGRAMME MFT FROM
;DR DOBBS .
;
;IF YOU HAVE A QUERY, PHONE ME ON
;SUDBURY (SUFFOLK) 76601
; ANDREW R.M.CLARKE 7/4/81



;	*** MISCELLANEOUS EQUATES ***


MAXLN	EQU	56	;LINES/PAGE
NULLS	EQU	0	;NULLS AFTER A FORM FEED

FN	EQU	01	;FILE NAME OFFSET
FT	EQU	09	;FILE TUPE OFFSET
EX	EQU	12	;FILE EXTENT OFFSET
NR	EQU	32	;NEXT RECORD OFFSET

CPM	EQU	0005H	;CPM ENTRY POINT
DBUF	EQU	0080H	;TRANSIENT PROGRAM BUFFER 
TFCB	EQU	005CH	;TRANSIENT PROGRAM FCB

PBUFF	EQU	09	;PRINT BUFFER CODE
OPEN	EQU	15	;OPEN FUNCTION CODE
READ	EQU	20	;READ FUNCTION CODE
SEARF	EQU	17	;SEARCH FUNCTION CODE
SEARN	EQU	18	;SEARCH NEXT FUNCTION CODE

LINES	EQU	7	;LINES TO PAGE TOP

LF	EQU	0AH	;<LF>
FF	EQU	0CH	;<FF>
CR	EQU	0DH	;<CR>
TAB	EQU	09H	;<TAB>
SPACE	EQU	20H	;<SPACE>
DOT	EQU	2EH	;FULL STOP
RUBOUT	EQU	7FH	;USED AS FF NULL. MAY CAUSE PROBLEM
			;TO SOME PRINTERS

ODEV	EQU	2	;CON:=2  LST:=5
FORM	EQU	0FFFFH	;SET 0FFFFH FOR 0CH <FF>
			;SET 0 FOR <LF>'S TO PAGE TOP



;	*** MAIN PROGRAMME START ***
;	----------------------------



	ORG	100H
	JMP	START


;	*** PUT FILE IDENTITY IN OBJECT CODE ***

	DB	'/ PRINT UTILITY VERS. 1.6 /'
	IF FORM
	DB	' HARDWARE FF /'
	ENDIF
	IF	NOT FORM
	DB	' LF TO PAGE TOP /'
	ENDIF
	IF	NOT ODEV-5
	DB	' OUT TO LST: /'
	ENDIF
	IF	NOT ODEV-2
	DB	' OUT TO CON: /'
	ENDIF
	DB	'MULTIPLE FILE ACCESS  /'


;	*** SET UP THE STACK ***


START:	LHLD	CPM+1
	DCX	H
	SPHL
Š;	*** MOVE COMMAND LINE TO CBUF ***

	LXI	H,DBUF	;ADDRESS OF COMMAND
	LXI	D,CBUF	;ADDRESS OF CBUFFER
	MOV	B,M	;GET LENGTH
	MOV	A,B	;CHECK FOR ENTRY
	ORA	A	;IS LENGTH ZERO?
	JZ	ERROR	;IF SO, ABORT
	INX	H
MOVCOM:	MOV	A,M	;GET NEXT BYTE
	INX	H
	STAX	D	;STORE IN CBUF
	INX	D
	DCR	B	;DECREMENT COUNT
	JNZ	MOVCOM
	XRA	A
	STAX	D	;STORE ZERO AT END

;	*** FILL FILE NAME TABLE ***

	LXI	H,CBUF	
	SHLD	CBUFF	;RESET CBUF POINTER
	CALL	CFNT	;WRITE FILE NAME TABLE
	LXI	H,FNT
	SHLD	IFNTP	;RESET FNT POINTER


;	*** FETCH NEXT FILENAME ***

FETCH:	LHLD	IFNTP	;FETCH FNT POINTER
	MOV	A,M
	CPI	0FFH	;IS IT END OF TABLE?
	JZ	GOCPM	;IF SO,JOB DONE
	MVI	M,1
	INX	H

	LXI	D,TFCB+FN ;COPY IN FILENAME
	MVI	B,11
	CALL	MOVE
	SHLD	IFNTP	;SAVE FNT POINTER

	XRA	A	;CLEAR THE FCB
	STA	TFCB
	STA	TFCB+EX
	STA	TFCB+NR


;	*** RESET POINTERS AND COUNTERS ***

	XRA	A
	STA	COL
	STA	PAGE
	STA	PAGE+1
	LXI	H,DBUF+128	
	SHLD	INPTRŠ
;	*** OPEN THE NEXT FILE ***


	LXI	D,TFCB	;POINT TO FCB
	CALL	FOPEN	;OPEN FILE
	JC	ERROR	;IF ERROR, EXIT
;
	IF	FORM	;DO <FF> IF HARDWARE
	CALL	TOF	;PRINT HEADING
	ENDIF
;
	IF 	NOT FORM;IF NO HARDWARE, ASSUME THERE
	CALL TOF3
	ENDIF
;

;	*** FILE PRINTING LOOP ***

LOOP:	CALL	GETBT	;GET A BYTE
	JC	ERROR	;ERROR
	CPI	1AH	;EOF?
	JZ	DONE	;YES
	CPI	CR	;CR?
	JZ	CRET	;YES
	CPI	LF	;LF?
	JZ	LFEED	;YES
	CPI	TAB	;TAB?
	JZ	TABMOV	;YES
	CPI	SPACE	;ODD CONTROL CHR?
	JNC	LOOPX	;NO, PRINT CHR.
	JMP	LOOP	;YES, DROP IT

;	*** SPACE TO NEXT TAB STOP ***

TABMOV:	LXI	H,COL	;POINT TO COLUMN
TBLP:	MVI	A,SPACE	;PRINT ONE SPACE
	CALL	PBYT
	MOV	A,M	;GET COLUMN
	ANI	07H	;MODULO 8
	JNZ	TBLP	;IF NOT AT TAB STOP, KEEP TYPEIN
	JMP	LOOP
LOOPX:	CALL	PBYT	;PRINT BYTE
	JMP	LOOP

;	*** ZERO COLUMN COUNTER AND TYPE CR ***

CRET:	XRA	A
	STA	COL
	MVI	A,CR
	JMP	LOOPX

;	*** PROCESS LINE FEEDS ***

LFEED:	LDA	LINE	;GET LINE COUNTŠ	CPI	MAXLN	;PAGE OVERFLOW?
	JZ	NEWPG	;YES
	INR	A	;BUMP LINE COUNT
	STA	LINE
	MVI	A,LF
	JMP	LOOPX	;CONTINUE

;	*** GO TO NEW PAGE ***

NEWPG:	MVI	A,CR
	CALL	PBYT	;PRINT CR
	CALL	TOF
	JMP	LOOP
;
;	*** SUBROUTINE TO PRINT PAGE NO. AND TITLE ***
;	*** FORM FEED,PRINT TITLE AND PAGE ***

;
	IF	FORM	;ROUTINE TO FORM FEED WITH 0CH
TOF:	MVI	A,FF	;FORM FEED
	CALL	PBYT
	MVI	B,NULLS	;NUMBER OF RUBOUTS
TOF2:	MVI	A,RUBOUT
	CALL	PBYT
	DCR	B	;DCREMENT COUNT
	JNZ	TOF2	;PRINT 'N' RUBOUTS
	ENDIF
;
;
	IF	NOT FORM;ROUTINE TO PAGE TOP WITH <LF>'S
TOF:	MVI	B,LINES	;NUMBER OF LINES
TOF2:	MVI	A,LF	;<LF>
	CALL	PBYT
	DCR	B	;DCREMENT COUNT
	JNZ	TOF2	;PRINT 'N' <LF>'S
	ENDIF
;
;
TOF3:	LXI	H,FMSG	;POINT TO MESSAGE
	CALL	PSTRNG	;PRINT STRING
	LXI	H,TFCB ;POINT TO FCB
	CALL	TYPFCB	;TYPE THE FILENAME
	LXI	H,PMSG	;POINT TO MESSAGE
	CALL	PSTRNG	;PRINT STRING
	LHLD	PAGE	;GET PAGE NUMBER
        INX     H       ;BUMP IT
	SHLD	PAGE	;SAVE IT
	CALL	DEC	;CONVERT TO DECIMAL
	MVI	A,CR	;PRINT CR
	CALL	PBYT
	MVI	A,LF
	CALL	PBYT	;PRINT LF
	MVI	A,LF
	CALL	PBYT	;AND SECOND
	MVI	A,LFŠ	CALL	PBYT	;AND A THIRD
	XRA	A
	STA	LINE	;RESET LINE COUNT
	STA	COL	;RESET COLUMN
	RET

;	*** PRINT OUT A BYTE ***

PBYT:	PUSH	H
	PUSH	B
	PUSH	PSW
	MOV	E,A
	MVI	C,ODEV
	CALL	CPM	;PRINT
	POP	PSW
	CPI	SPACE	;NON-PRINTING?
	JC	PBY2	;YES, DONT BUMP COL
	LXI	H,COL	;INCREMENT COLUMN
	INR	M
PBY2:	MVI	C,11	;GET CONSOLE STATUS
	CALL	CPM
	CPI	00	;BREAK?
	JNZ	GOCPM	;YES, DONE
	POP	B
	POP	H
	RET

;	*** PRINT A STRING ( TERMINATED BY $) ***

PSTRNG:	MOV	A,M	;GET BYTE
	CPI	'$'	;STRING END?
	RZ		;YES, DONE
	CALL	PBYT	;PRINT BYTE
	INX	H	;BUMP POINTER
	JMP	PSTRNG	;LOOP

;	*** PRINT B BYTES FROM HL (NOT SPACE) ***

PCNT:	MOV	A,M	;GET BYTE
	CPI	SPACE	;IS IT A SPACE?
	CNZ	PBYT	;PRINT IT IF NOT SPACE
	INX	H	;BUMP POINTER
	DCR	B	;DECREMENT COUNT
	JNZ	PCNT
	RET

;	*** PRINT 16 BIT NUMBER IN HL (DECIMAL ***

DEC:    PUSH H!PUSH D!PUSH B
        MVI     B,0     ;CLEAR 'DIGIT WRITTEN' FLAG
        LXI     D,10000 ;WRITE FIRST DIGIT
        CALL    DIG
        LXI     D,1000  ;WRITE SECOND DIGIT
        CALL    DIG
        LXI     D,100   ;AND THE THIRD!Š        CALL    DIG
        LXI     D,10    ;THE FOURTH
        CALL    DIG
        LXI     D,1
        MVI     B,1     ;FORCE LAST DIGIT TO PRINT
        CALL    DIG
        POP B!POP D!POP H
        RET

DIG:    MVI     C,0
DIG1:   MOV     A,L
        SUB     E       ;HL=HL-DE
        MOV     L,A
        MOV     A,H
        SBB     D
        MOV     H,A
        JC      DIG2   ;JUMP IF <0
        INR     C
        JMP     DIG1   ;LOOP

DIG2:   DAD     D       ;HL=HL+DE
        MOV     A,C
        ORA     C
        JNZ     DIG3
        MOV     A,B
        ORA     B       ;JUMP IF DIGIT WRITTEN
        JNZ     DIG3
        MVI     A,' '
        JMP     PBYT
        
DIG3:   MVI     B,1
        MOV     A,C
        ADI     '0'
        JMP     PBYT



;	*** DO A FF AT THE END OF FILE ***

	IF	FORM
DONE:	MVI	A,FF	;FORM FEED
	CALL	PBYT
	MVI	B,NULLS	;RUBOUT COUNT
DLP2:	MVI	A,RUBOUT
	CALL	PBYT
	DCR	B
	JNZ	DLP2
	ENDIF
;
	IF	NOT FORM
DONE:	LXI	H,LINE	;POINT TO CURRENT LINE
	MVI	A,MAXLN
	SUB	M	;LINES LEFT TO PRINT
	ADI	LINES	;PLUS LINE TO PAGE TOP
	MOV	B,AŠDLP2:	MVI	A,LF	;<LF>
	CALL	PBYT
	DCR	B	;DCREMENT COUNT
	JNZ	DLP2	;PRINT 'N' LINES TO PAGE TOP
	ENDIF
;
	JMP	FETCH	;GO GET ANOTHER FILE

;	*** EXIT IF IRRECOVERABLE ERROR ***

ERROR:	LXI	D,ERMSG
	MVI	C,PBUFF	;WRITE MSG
	CALL	CPM
GOCPM:	JMP	0000H


 
;	*** OPEN FCB IN DE, SET CARRY IF ERROR ***


FOPEN:	MVI	C,OPEN	;OPEN CODE
	CALL	CPM	;ISSUE OPEN
	CPI	0FFH	;ERROR?
	JZ	FOERR	;YES
	XRA	A	;CLEAR CARRY
	RET
FOERR:	LXI	D,FOERRM;'OPEN FILE ERROR'
	MVI	C,PBUFF	;PRINT BUFFER BDOS CALL
	CALL	CPM
	STC
	RET


;	*** SEARCH FOR FIRST OCCURENCE ***

SRCHF:	PUSH H!PUSH D!PUSH B
	MVI	C,SEARF
	CALL	CPM
	POP B! POP D! POP H
	RET

;	*** SEARCH FOR NEXT OCCURENCE ***

SRCHN:	PUSH H!PUSH D!PUSH B
	MVI	C,SEARN
	CALL	CPM
	POP B!POP D!POP H
	RET

;	*** READ A BYTE FROM THE FILE ***

GETBT:	LXI	H,DBUF+128
	XCHG		;BUFFER END ADDR. IN DE
	LHLD	INPTR	;CURRENT POINTER IN HL
	CALL	CPHL	;TEST FOR END OF BUFFERŠ	JZ	GETB2	;YES, READ
GETB1:	MOV	A,M	;GET BYTE
	INX	H	;BUMP POINTER
	SHLD	INPTR	;SAVE POINTER
	ORA	A	;RESET CARRY
	RET
GETB2:	MVI	C,READ	;READ CODE
	LXI	D,TFCB	;FCB ADDRESS
	CALL	CPM	;ISSUE READ
	CPI	00	;ERROR?
	JNZ	IERR	;YES
	LXI	H,DBUF	;RESET BUFFER POINTER
	SHLD	INPTR
	JMP	GETB1	;CONTINUE
IERR:	STC
	RET


;	*** PRINT THE FCB ADDRESSED BY HL ***

TYPFCB:	INX	H	;POINT TO FN
	MVI	B,8	;LENGTH OF NAME
	CALL	PCNT	;PRINT IT
	MVI	A,DOT	;PRINT A DOT
	CALL	PBYT	;
	MVI	B,3	;LENGTH OF TYPE
	CALL	PCNT	;PRINT IT
	RET


;	*** COMPARE HL VS DE ***


CPHL:	MOV	A,H
	CMP	D
	RNZ
	MOV	A,L
	CMP	E
	RET


	
;	*** MOVE SUBROUTINE ***

;
MOVE:	MOV	A,M
	INX	H
	STAX	D
	INX	D
	DCR	B
	JNZ	MOVE
	RET
;
;	*** GET THE FILE NAME ***
;ŠGTFN:	MOV	A,M
	ORA	A
	RZ
	CPI	' '
	JNZ	GTFN0
	INX	H
	JMP	GTFN
;
GTFN0:	LXI	D,XFCB
	XRA	A
	STAX	D
	INX	D
	PUSH	D
	MVI	B,11
	MVI	A,' '
GTFN6:	STAX	D
	INX	D
	DCR	B
	JNZ	GTFN6
	POP	D
	MVI	B,9
GTFN1:	MOV	A,M
	ORA	A
	JZ	GTFN4
	INX	H
	CPI	' '
	JZ	GTFN4
	CPI	'.'
	JZ	GTFN2
	CPI	'*'
	JZ	GTFN7
	STAX	D
	INX	D
	DCR	B
	JZ	GTFN5
	JMP	GTFN1
;
GTFN7:	DCR	B
	JZ	GTFN9
	MVI	A,'?'
	STAX	D
	INX	D
	JMP	GTFN7
;
GTFN9:	MOV	A,M
	CPI	'.'
	JNZ	GTFN4
	INX	H
GTFN2:	LXI	D,XFCB+FT
	MVI	B,4
GTFN3:	MOV	A,M
	ORA	A
	JZ	GTFN4
	INX	H
	CPI	' 'Š	JZ	GTFN4
	CPI	'*'
	JZ	GTFN8
	STAX	D
	INX	D
	DCR	B
	JZ	GTFN5
	JMP	GTFN3
;
GTFN8:	DCR	B
	JZ	GTFN4
	MVI	A,'?'
	STAX	D
	INX	D
	JMP	GTFN8
;
GTFN4:	XRA	A
	RET
;
GTFN5:	STC
	RET
;

;	*** CREATE FILE NAME TABLE ***
;
CFNT:	LXI	H,FNT
	SHLD	IFNTP
CFNT1:	LHLD	CBUFF
	MOV	A,M
	ORA	A	;EXIT IF END OF LIST
	RZ
	CALL	GTFN	;GET NEXT AFN
	SHLD	CBUFF	;SAVE CMD BUFFER POINTER
	JNC	FIND	;JUMP IF FILE NAME OK
	LXI	H,MSG5	;WRITE 'SYNTAX ERROR IN FILE NAME'
	CALL	PSTRNG
	JMP	CFNT1	;LOOP
;
FIND:	XRA	A	;CLEAR XFCB EXTENT FIELD
	STA	XFCB+EX
	LXI	D,XFCB
	CALL	SRCHF	;SEARCH FOR FIRST OCCURRENCE
	CPI	255	;JUMP IF FOUND
	JNZ	GETFCB
	LXI	H,XFCB 
	CALL	TYPFCB
	LXI	H,MSG7	;WRITE ' NOT FOUND
	CALL	PSTRNG
	JMP	ERROR	;LOOP
;
GETFCB:	ANI	3	;INDEX INTO CBUF
	MOV	L,A
	MVI	H,0
	DAD	H
	DAD	HŠ	DAD	H
	DAD	H
	DAD	H
	LXI	D,DBUF
	DAD	D
	XCHG		;COPY FILENAME INTO FNT
	LHLD	IFNTP
	XCHG
	MVI	B,12
	CALL	MOVE
	XCHG
	SHLD	IFNTP	;SAVE INPUT FNT POINTER
	MVI	M,0FFH	;ENSURE FF BYTE AT END
	LXI	D,XFCB	;SEARCH FOR NEXT OCCURRENCE
	CALL	SRCHN
	CPI	255
	JNZ	GETFCB
	JMP	CFNT1	;GO GET NEXT AFN
;
;
;	*** MESSAGES AND STRINGS ***

FMSG:	DB	CR,'> $' ;INSERT PRINTER ASTRING TO TASTE
PMSG:	DB	'                 PAGE$'
ERMSG:	DB	'I FEAR THAT YOU HAVE MADE AN ERROR, '
	DB	'PLEASE TRY AGAIN',0DH,0AH,'$'
MSG5:	DB	'SYNTAX ERROR IN FILENAME',0DH,0AH,'$'
MSG7:	DB	' NOT FOUND ',0DH,0AH,'$'
FOERRM:	DB	'UNABLE TO OPEN FILE$'

;	*** DATA AND TABLES ***

COL:	DB	0	;COLUMN NUMBER
LINE:	DB	0	;LINE NUMBER
PAGE:	DW	0	;PAGE COUNTER
CBUFF:	DW	0	;COMMAND LINE POINTER
IFNTP:	DW	0	;FNT POINTER
INPTR:	DW	DBUF+128;INPUT POINTER
FNT:	DS	16*64+1	
CBUF:	DS	80	;COMMAND BUFFER
XFCB:	DS	33

	END

;***E.O.F.***
