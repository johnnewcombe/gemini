	; HI-TECH S100 COLOUR VDU DRIVER
	; FOR MICROSOFT CP/M FORTRAN
	;
	; WRITTEN BY SJ WITHERS, SCHOOL OF
	; INDUSTRIAL AND BUSINESS STUDIES,
	; UNIVERSITY OF WARWICK, COVENTRY.
	;
	; VERSION 1 - APRIL 1980
	;
	; COMMERCIAL RIGHTS RESERVED, BUT
	; MAY BE FREELY USED FOR EDUCATIONAL,
	; PRIVATE AND OTHER NON-COMMERCIAL
	; PURPOSES. IN PARTICULAR, THIS
	; PIECE OF SOFTWARE MUST NOT BE OFFERED
	; FOR SALE.
	;
	ENTRY	$LUNTB
	EXT	$DRV3,LPTDRV,DSKDRV,$BF,$BL,$ERR,$IOERR
	;
	; FIRST, A SAMPLE LOGICAL UNIT NUMBER TABLE.
	; YOU MAY NEED TO MODIFY IT TO INCORPORATE
	; ANY OTHER SPECIAL PURPOSE DRIVERS YOU HAVE
	; WRITTEN OR INSTALLED.
	;
$LUNTB:	DB	0BH
ONE:	DW	$DRV3
TWO:	DW	LPTDRV
THREE:	DW	$DRV3
FOUR:	DW	$DRV3
FIVE:	DW	COLDRV		;THE COLOUR BOARD IS LOGICAL UNIT 5
SIX:	DW	DSKDRV
SEVEN:	DW	DSKDRV
EIGHT:	DW	DSKDRV
NINE:	DW	DSKDRV
TEN:	DW	DSKDRV
;
VRAMBA:	EQU	0F800H		;BASE ADDRESS OF VIDEO RAM
				; MAY NEED CHANGING TO SUIT
				; THE LOCATION OF THE BOARD
				; IN YOUR SYSTEM
	;
COLDRV:	DW	COLFR		;FORMATTED READ
	DW	COLFW		;FORMATTED WRITE
	DW	COLBR		;BINARY READ
	DW	COLBW		;BINARY WRITE
	DW	COLRE		;REWIND
	DW	COLBA		;BACKSPACE
	DW	COLEN		;ENDFILE
	;
COLRE:
COLBA:
COLEN:	XOR	A		;NO-OPS FOR TERMINAL DEVICES
	RET
	;
COLFR:
COLBR:
COLBW:	JP	$IOERR		;ILLEGAL OPERATIONS
	;
COLFW:				;NO  CR-LF IS PRINTED AT THE BEGINNING
				; OF A RECORD AS THIS CAN CAUSE
				; PROBLEMS WITH CURSOR ADDRESSING.
	LD	HL,($BF)	;BUFFER ADDRESS
	LD	A,($BL)		;NUMBER OF CHARS
	DEC	A		;LOSE 1ST CHAR
	INC	HL		; IE NO CARRIAGE CONTROL
	OR	A		;CONDITION ZERO FLAG
NEXTCH:	RET	Z		;DONE?
	PUSH	AF		;SAVE CHARACTER COUNT
	LD	A,(HL)		;GET CHARACTER
	INC	HL		;BUMP POINTER
	PUSH	HL		; & SAVE IT
	LD	B,A		;SAVE CHARACTER
	LD	A,(ESCFLG)	;WAS PREVIOUS CHARACTER ESC?
	OR	A		;CONDITION FLAGS
	JP	NZ,ESC
	LD	A,B		;RESTORE CHARACTER
	CP	A,32		;IS IT A CONTROL CHARACTER?
	JP	M,CONTRL
PUTCHR:	LD	HL,(CURLOC)	;GET CURSOR POSITION
	LD	(HL),A		;DISPLAY CHARACTER
	LD	A,(COL)
	INC	A		;BUMP COLUMN COUNT
	LD	(COL),A
	CP	A,40		;END OF LINE?
	JP	Z,NLINE
	INC	HL		;STILL HOLDS OLD CURLOC
	LD	(CURLOC),HL
	JP	RESTOR
	;
NLINE:	LD	A,0		;NEW COL WILL BE ZERO
	LD	(COL),A
	LD	A,(ROW)
	INC	A
	LD	(ROW),A		;BUMP ROW COUNTER
	CP	A,24		;END OF PAGE?
	JP	Z,TOP		;IF SO, START OVER
	LD	DE,25
	ADD	HL,DE		;RELATIVE ADDRESS OF NEW LOCATION
	LD	(CURLOC),HL
	JP	RESTOR
	;
TOP:	XOR	A
	LD	(ROW),A		;BACK TO TOP OF PAGE
	LD	HL,VRAMBA	;VIDEO RAM BASE ADDRESS
	LD	(CURLOC),HL
	;
RESTOR:	POP	HL		;RESTORE  BUFFER POINTER
	POP	AF		;AND CHARACTER COUNT
	DEC	A		;THAT'S ONE MORE DONE!
	JP	NEXTCH
	;
ESC:	XOR	A
	LD	(ESCFLG),A	;CLEAR ESCAPE FLAG
	LD	A,B		;CHARACTER BACK INTO A
	JP	PUTCHR
ESCFLG:	DB	0		;NON-ZERO INDICATES LAST CHARACTER
				;WAS  ESCAPE
	;
CONTRL:	CP	A,27		;IS IT ESCAPE?
	JP	Z,SETESC
	CP	A,13		;CARRIAGE RETURN?
	JP	Z,CRET
	CP	A,10		;LINE FEED?
	JP	Z,LFEED
	CP	A,3		;CURSOR X-Y?
	JP	Z,CURSOR
	CP	A,12		;FORM FEED? (ERASE PAGE)
	JP	Z,FFEED
	JP	RESTOR		;IGNORE ALL OTHERS
	;
SETESC:	LD	(ESCFLG),A	;ANY NON-ZERO WILL DO TO SET ESCFLG
	JP	RESTOR
	;
CRET:	LD	A,(COL)
	LD	B,A		;HOLD COLUMN NUMBER IN B
	LD	A,(CURLOC)	;GET LOW BYTE OF CURSOR ADDRESS
	SUB	A,B		;LOW BYTE OF BEGINNING OF LINE ADDRESS
	LD	(CURLOC),A	;NOTE THAT HIGH BYTE OF ADDRESS
				;DOESN'T CHANGE ON A LINE
	XOR	A
	LD	(COL),A		;ZERO COL COUNT
	JP	RESTOR
	;
LFEED:	LD	DE,64		;MOVE ON 64 BYTES FOR A LINEFEED
	LD	HL,(CURLOC)	;GET CURRENT CURSOR LOCATION
	ADD	HL,DE
	LD	(CURLOC),HL	;SAVE NEW LOCATION
	LD	A,(ROW)
	INC	A		;BUMP ROW COUNT
	LD	(ROW),A
	CP	A,24		;END OF PAGE
	JP	NZ,RESTOR	;IF NOT, RESTORE POINTER AND CHARACTER COUNT
	XOR	A
        LD	(ROW),A		;ZERO ROW COUNT
	LD	A,(COL)		;GET  COLUMN COUNT
	LD	E,A		;D STILL =0
	LD	HL,VRAMBA	;VIDEO RAM BASE ADDRESS
	ADD	HL,DE		;ADD OFFSET FOR COLUMN
	LD	(CURLOC),HL	;SAVE NEW CURSOR ADDRESS
	JP	RESTOR		;RESTORE POINTER AND COUNTER
	;
CURSOR:	POP	HL		;RESTORE PONTER
	POP	AF		;AND CHARACTER COUNT
	PUSH	AF		;SAVE IT AGAIN
	CP	A,2		;NEED  X AND Y
	JP	M,XYERR		;PRINT ERROR IF THEY'RE NOT THERE
	POP	AF
	DEC	A		;ONCE FOR X
	DEC	A		;ONCE FOR Y
	PUSH	AF		;SAVE IT (DEC FOR CODE 3 AT RESTOR)
	LD	A,(HL)		;X-COORD
	INC	HL
	LD	(COL),A		;SAVE NEW COLUMN
	LD	A,(HL)		;Y-COORD
	INC	HL
	LD	(ROW),A		;SAVE NEW ROW
	PUSH	HL		;SAVE BUFFER POINTER
				;NOW TO CALCULATE MEMORY LOCATION OF
				; NEW CURSOR POSITION.
				; EQUATION IS
				;  CURLOC=VRAMBA+(64.*ROW)+COL
	LD	E,A		;ROW INTO E
	LD	A,64		;CONSTANT 64 INTO H
	LD	H,A
				;UNSIGNED 8 * 8 BIT MULTIPLY
				;PERSONAL COMPUTER WORLD 
				;VOL1 NO2 PAGE 54
				;PARAMETERS IN H AND E REGS
				;RESULT IN HL
	LD	B,8		;LOOP COUNTER
	LD	D,0
	LD	L,D
MPY1:	ADD	HL,HL		;SHIFT HL LEFT
	JR	NC,MPY2		;SKIP IF C FLAG=0
	ADD	HL,DE		;ADD IN MULTIPLICAND
MPY2:	DJNZ	MPY1		;LOOP UNTIL DONE
	LD	D,H		;TRANSFER RESULT
	LD	E,L		;  INTO DE
	LD	HL,VRAMBA	;VIDEO RAM BASE ADDRESS
	ADD	HL,DE
	XOR	A
	LD	D,A
	LD	A,(COL)		;GET COLUMN 
	LD	E,A
	ADD	HL,DE		;ADD IN COLUMN 
	LD	(CURLOC),HL	;SAVE NEW CURSOR ADDRESS
	JP	RESTOR
	;
XYERR:	CALL	$ERR
	DB	'X-YERR'
	JP	RESTOR
	;
FFEED:	XOR	A		;REINITIALISE ROW AND COLUMN
	LD	(ROW),A
	LD	(COL),A
	LD	HL,VRAMBA	;BASE ADDRESS OF VIDEO RAM
	LD	(CURLOC),HL	;REINITIALISE CURSOR LOCATION
	LD	A,32		;FILLING SCREEN WITH SPACES
	LD	(HL),A		;WRITE THE FIRST SPACE
	LD	BC,05E7H	;NUMBER OF SPACES TO WRITE
	LD	D,H
	LD	E,L
	INC	DE		;ADDRESS OF FIRST DESTINATION
	LDIR			;WRITE THE SPACES
	JP	RESTOR	
	;
	;
	; DATA STORAGE
	;
CURLOC:	DW	0F800H
ROW:	DB	0
COL:	DB	0
	END
